<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MS17-010复现]]></title>
    <url>%2F2019%2F09%2F13%2FMS17-010%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[MS17-010/EternalBlue/永恒之蓝 Microsoft 安全公告 MS17-010 当 Microsoft 服务器消息块 1.0 (SMBv1)服务器处理某些请求时，存在多个远程执行代码漏洞。成功利用这些漏洞的攻击者可以获取在目标系统上执行代码的能力 受影响的系统(详细系统版本请查看公告)： Windows Vista Windows Server 2008 Windows 7 Windows Server 2008 R2 Windows 8.1 Windows Server 2012 和 Windows Server 2012 R2 Windows RT 8.1 Windows 10 Windows Server 2016 相对应的 CVE（Windows SMB 远程代码执行漏洞）： CVE-2017-0143 CVE-2017-0144 CVE-2017-0145 CVE-2017-0146 CVE-2017-0148 复现环境： Windows 7 (Build 7601, Service Pack 1) Ubuntu server(Metasploit)]]></content>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2019-0708复现]]></title>
    <url>%2F2019%2F09%2F12%2FCVE-2019-0708%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[CVE-2019-0708 远程桌面服务的远程代码执行漏洞, 漏洞触发无需用户交互 A remote code execution vulnerability exists in Remote Desktop Services formerly known as Terminal Services when an unauthenticated attacker connects to the target system using RDP and sends specially crafted requests, aka ‘Remote Desktop Services Remote Code Execution Vulnerability’. —— CVE 复现环境: Windows 7 (Build 7601, Service Pack 1) x64 Windows server 2008 R2 x64 Metaspliot (Ubuntu Server) 初始版本的 Exp只适用于64位版本的 Windows 7和 Windows server 2008 R2 更新 MSF到最新（5.0.47）版本，推荐使用 Curl更新（需要删除旧版）： 1curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall 因为这个 pull不是正式的，所以需要自行比对 diff增删或者直接替换文件: Pull 地址 这里已下载完成，可直接替换使用(建议去 Pull下载，万一就更新了呢)： rdp.rb cve_2019_0708_bluekeep.rb rdp_scanner.rb cve_2019_0708_bluekeep_rce.rb 123456# 对应的替换文件lib/msf/core/exploit/rdp.rbmodules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rbmodules/auxiliary/scanner/rdp/rdp_scanner.rbmodules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb 执行 exploit]]></content>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python不常用用法]]></title>
    <url>%2F2019%2F09%2F04%2FPython%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Python 日常使用时的一些方法或技巧，怕忘记怕麻烦，记录一下 通过值获取键 12345&gt;&gt;&gt; dct = &#123;'Name': 'Alice', 'Age': 18, 'uid': 1001, 'id': 1001&#125;&gt;&gt;&gt; def get_key1(dct, value):... return list(filter(lambda k:dct[k] == value, dct))&gt;&gt;&gt; get_key1(dct, 1001)['id', 'uid'] 12345678910111213141516171819202122232425262728293031# 某函数返回的结果（参数 md5dict）&#123; '/root/MyDocs/Python/02-PhotosMD5/76478297_p0.jpg': '6beb7af8d37e26eb88bb1b75c8e51474', '/root/MyDocs/Python/02-PhotosMD5/76478297_p0_copy.jpg': '6beb7af8d37e26eb88bb1b75c8e51474', '/root/MyDocs/Python/02-PhotosMD5/561284.jpg': '4f9d1c75bd62b0d7e3fdd0abd810ce34', '/root/MyDocs/Python/02-PhotosMD5/561271.jpg': 'bb60b6e6626968cde17cad0a8f18290b', '/root/MyDocs/Python/02-PhotosMD5/561279.jpg': 'e5af4c3275dafbef5932ab69c446374c'&#125;# 变量 cp的内容('6beb7af8d37e26eb88bb1b75c8e51474', 2)('4f9d1c75bd62b0d7e3fdd0abd810ce34', 1)('bb60b6e6626968cde17cad0a8f18290b', 1)('e5af4c3275dafbef5932ab69c446374c', 1)def analysedDict(md5dict): cp = Counter(md5dict.values()) # 只取 MD5值 def filterFun(dicts, value): bad = list(filter(lambda k:dicts[k] == value, dicts)) print(bad) for i in cp.items(): if i[1] &gt; 1: print("\033[0;31m&#123;0&#125;\033[0m".format(i)) filterFun(md5dict, i[0]) # ---- 结果 ------# ('6beb7af8d37e26eb88bb1b75c8e51474', 2)# ['/root/MyDocs/Python/02-PhotosMD5/76478297_p0.jpg', '/root/MyDocs/Python/02-PhotosMD5/76478297_p0_copy.jpg']]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows域认证体系—Kerberos认证]]></title>
    <url>%2F2019%2F08%2F25%2FWindows%E5%9F%9F%E8%AE%A4%E8%AF%81%E4%BD%93%E7%B3%BB%E2%80%94Kerberos%E8%AE%A4%E8%AF%81%2F</url>
    <content type="text"><![CDATA[Kerberos认证流程、含义 关键词 Kerberos认证 域控制器（Domain Controller，DC） 密钥分发中心（Key Distribution Center，KDC） 帐户数据库（Account Database，AD） 身份验证服务（Authentication Service，AS） 入场卷[认证票据]（Ticket Granting Ticket，TGT） 票据发放服务（Ticket Granting Service，TGS） 票据（Ticket） Master Key / Long-term Key |长期密钥（被 Hash加密的用户密钥） Session Key / Short-term Key | 短期会话密钥 krbtgt 账户 关键词/名称含义： Account Database：类似于 SAM的数据库，存储所有 Client的白名单，只有处于白名单中的 Client才可以成功申请 TGT Authentication Service：为 Client生成 TGT的服务 Ticket Granting Ticket：入场券，通过入场券能够获得票据，是一种临时凭证的存在 Ticket Granting Service：为 Client生成某个服务的票据 Ticket：票据，网络对象互相访问的凭证 Master Key：长期密钥。将本机密码进行 Hash运算（NTML）得到一个 Hash Code, 我们一般管这样的 Hash Code叫做 Master Key Session Key：短期会话密钥。一种只在一段时间内有效的 Key krbtgt账户：每个域控制器都有一个 krbtgt的用户账户，是 KDC的服务账户，用来创建票据授予服务(TGS)加密的密钥 介绍 Kerberos认证含义 Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为 客户机 / 服务器应用程序 提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意地读取、修改和插入数据。 在以上情况下， Kerberos 作为一种可信任的第三方认证服务，是通过传统的密码技术（如：共享密钥）执行认证服务的。——度娘百科 Kerberos认证的三只狗头（脑补地狱三头犬） Client Server DC（KDC）。在 Windows域环境中，KDC的角色由 DC（Domain Controller）来担当 Kerberos大致流程 Client 携带账户信息向 KDC上的 AS服务发送想要访问 Server A的请求，索要入场卷（ TGT）；AS通过 AD验证 Client账户的访问权，成功后返回 TGT Client 携带 TGT请求 KDC中的 TGS服务想要访问 Server A，索要票据（Ticket）；TGS验证 Client的 TGT，具有 Server A的访问权，返回 Ticket Client 携带 Ticket与服务器进行相互验证且成功，可以访问 Server A，但无权访问其他服务器 Kerberos 认证三步走 第一步 Client 与 AS 第一步 AS 实现对 Client 身份的确认，并颁发给该 Client 一个 TGT 首先，Client发送一个携带被自身 Master Key加密的身份信息 AS Request到 KDC，KDC验证用户名是否存在于 AD中（KDC 可以通 AD中对应用户名提取该 Client 的 Master Key） AS Request大致内容： Pre-authentication data：被 Client 的 Master Key加密过的 Timestamp（Timestamp防爆破）。时间同步（Time Synchronization）显得尤为重要 Client name &amp; realm：Domain name\Client name （Client info） Server Name：KDC中 TGS 的 Server Name AS 需要验证发送方 Client info 是否为本人（Client的密码对否），所以 AS 只需从 AD中提取 Client对应的 Master Key 对 Pre-authentication data 进行解密，如果是一个合法的 Timestamp（时间差距合理），则可以证明发送方提供的用户名是存在于白名单中且密码对应正确的 验证成功后，返回给 Client一个 AS Response，主要包含两个部分：请求 Client 的 Master Key加密过的 TGS Session Key 和被 KDC（krbtgt 帐户）加密的TGT （客户端无法解密 TGT，因为它没有 KDC Hash） TGT大致内容： Session Key : 第一部分的 TGS Session Key （这里的 Session Key 是被 KDC加密,不是 Client） Client name &amp; realm : Domain name\Client （Client info） End time : TGT到期的时间 KDC此时生成一个 Session Key，使用 Client 用户名对应的 Master Key加密 Session Key，作为 AS数据（第一部分，用于后续与 TGS通讯）；使用 KDC中 krbtgt 帐户 的 Master Key 加密 Session Key 和 Client info，生成TGT（第二部分） Client 通过自己的 Master Key 对第一部分解密获得 TGS Session Key后，携带 TGT进入第二步 第二步 Client 与 TGS 第二步 实现 TGS 对 Client 身份（TGT）的确认，并分发给该 Client 一个 Ticket Client 使用 AS返回的 TGS Session Key 建立访问 KDC中 TGS服务的请求（TGS Request），再将 TGT 连同请求一起发送到 TGS 服务 TGS Request大致内容： Authenticator：（Client info + timestamp）通过 TGS Session Key加密 TGT ：（TGS Session Key + Client info + End Time） Client info ：Domain name/ Client Server info ：Client试图访问的 Server 时间戳 TGS收到 TGS Request后需要验证 TGT 和 Authenticator；因为 Authenticator 被 TGS Session Key 加密，TGS服务并没有保存这个 Session Key ；于是使用 TGS 自己的 Master Key 解密 TGT 获得其中的 TGS Session Key，进而解密 Authenticator，验证客户端是否受信 验证成功后，TGS 返回一个 TGS Response ，包含两个消息：加密的 Ticket 和加密的 Session Key TGS Response 大致内容： 使用 Server 的 Master Key 进行加密的 Ticket 通过 TGS Session Key 加密的 Server Session Key （将来 Client与 Server Service的通信使用） Ticket 大致内容： Server Session Key Client info End time: Ticket的到期时间 Client收到 TGS Response 后，使用 TGS Session Key 解密 Server Session Key，得到 Session Key 后，进入第三步 第三步 Client 和 Server 第三步，Client 携带 Server Session Key 和 Ticket访问服务器，验证成功后，可以访问 Server资源 Client 通过第二步获的 Server 的 Session Key ，创建用于证明自己就是 Ticket 的真正所有者的 Authenticator 和时间戳，并使用 Server的 Session Key 进行加密 向服务器请求后，服务器用自己的 Master Key 解密 Ticket ，得到 Server Session Key，使用 Server Session Key 解密 Authenticator 进行验证，同上一步一样验证成功后返回给 Client 新时间戳，使用 Server Session Key 加密 Client 通过缓存中的 Server Session Key 解密服务器返回信息，得到新时间戳并验证其是否正确。验证通过的话则客户端可以信赖服务器，并向服务器发送服务请求，服务器向客户端提供相应的服务 校验通过后，认证成功，该票据会一直存在客户端内存中 Ref windows 域认证 Kerberos详解 彻底理解Windows认证 - 议题解读 kerberos认证原理—讲的非常细致，易懂 Kerberos]]></content>
      <tags>
        <tag>Security</tag>
        <tag>Windows</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows认证体系—NTLM认证]]></title>
    <url>%2F2019%2F08%2F23%2FWindows%E8%AE%A4%E8%AF%81%E4%BD%93%E7%B3%BB%E2%80%94NTLM%E8%AE%A4%E8%AF%81%2F</url>
    <content type="text"><![CDATA[NTLM Hash与 NTLM的关系、NTLM网络认证流程 关键词 NTLM Hash NTLM LSASS Net-NTLM hash 关键词解释： NTLM Hash：存储在SAM数据库及NTDS数据库中对密码进行 Hash摘要计算后的结果 Net-NTLM hash：通常是指网络环境下 NTLM认证中的 Hash (下有说明) NTLM：除 Kerberos之外的一种网络认证协议，只支持 Windows LSASS：Windows系统的安全机制（系统进程）。用于本地安全和登陆策略 本地认证 Windows不存储用户的明文密码，它会将用户的明文密码经过加密后存储在 SAM (Security Account Manager Database，安全账号管理数据库)中。 SAM文件的路径是 %SystemRoot%\system32\config\sam 在进行本地认证的过程中，当用户登录时，系统将用户输入的明文密码加密成 NTLM Hash，与 SAM数据库中的 NTLM Hash 进行比较，从而实现认证 1winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; (认证) 首先，用户注销、重启、锁屏后，操作系统会让 winlogon显示登录界面，也就是输入框，接收输入后，将密码交给 lsass进程，这个进程中会存一份明文密码，将明文密码加密成 NTLM Hash，对比 SAM数据库中的 Hash进行验证 NTLM Hash Hash，一种将任意长度的消息压缩到某一固定长度的消息摘要的函数 。—— 度娘百科 通常意义上的 NTLM Hash指存储在 SAM数据库及NTDS数据库中对密码进行 Hash摘要计算后的结果，这类 Hash可以直接用于 PTH，并且通常存在于 LSASS进程中，便于 SSP（NTLM 安全支持提供程序）使用 NTLM Hash的生成 用户密码：susi2001 首先，密码经过十六进制转为 7375736932303031 将十六进制结果转为 Unicode格式 73007500730069003200300030003100 以 Hex（16进制）数据作 MD4加密 ed3202726368f8e9fd23e78fbfac8c13 MD4加密使用 HashCalc NTLM 和 NTLM Hash NTLM 是一种网络认证协议，与 NTLM Hash的关系就是：NTLM网络认证协议是以 NTLM Hash 作为根本凭证进行认证的协议 NTLM网络认证机制 NTLM是一种基于质询/应答 （Challenge/Response ）消息交换模式的认证机制，常用于 工作组和域环境下登录场景的身份认证 NTLM 认证方式 交互式认证 ：使用域账号登录到客户端；涉及两部分（客户端、域控） 非交互式认证 ：在已经登陆 的客户端上使用 SSO 的方式访问一台服务器；涉及三部分（客户端、域控、服务器） 12345# 非交互式场景net use Z: \\10.0.1.102\vefs "password" /user:domain\xiaoming # ornet use Z: \\10.0.1.102\vefs "password" /user:xiaoming 认证流程 NTLM协议的认证过程有三步： 协商：主要用于确认双方协议版本（NTLMv1、NTLMv2等） 质询：质询/应答 （Challenge/Response）模式，用于消息交换 验证：验证身份合法性，通常由 Server端或 DC完成这个过程 大致流程如下： 使用用户名和密码尝试登录客户端 客户端对密码进行哈希处理并缓存密码 hash，丢弃实际的明文密码(不存储)，然后将用户名发送到服务器，发起认证请求 服务器生成一个 16字节的随机数，称为 质询 (Challenge) 或随机数 (nonce.aspx)，并发送给客户端 客户端使用缓存的 用户密码的 Hash 对此 Challenge 进行加密，加密结果为 Response（暂且叫做Challenge1），然后将结果发送给服务器 服务器发送三项数据给域控制器： User name 发送给客户端的 Challenge（已加密） 从客户端接收到的 Response 域控制器使用 User name从 AD中检索该用户密码的 NTLM Hash，并使用此 NTLM Hash来加密 Challenge ，然后把这个值和客户端计算的响应值（Challenge1）进行比较。如果它们相同，则验证成功 经过 NTLM Hash加密 Challenge的结果在网络协议中称之为 Net NTLM Hash 在以上流程中，用户的登录密码 Hash 即为 NTLM Hash，Response中则包含 Net-NTLM Hash NTLM v2 NTLM version 2 (NTLMv2)是在 Windows NT 4.0 SP4中引入的（在 Windows 2000 中得到了本地支持），它通过加强协议来防止许多欺骗攻击，并增加服务器向客户机进行身份验证的能力，从而增强了 NTLM的安全性 NTLM v1 与 NTLM v2 最显著的区别就是 Challenge 与 加密算法 不同，共同点就是加密的原料都是 NTLM Hash ： Challenge： v1： 8-byte v2：16-byte Net NTLM Hash： v1：DES v2： HMAC-MD5 12345# NTLMC = 8-byte server challenge, randomK1 | K2 | K3 = NTLM-Hash | 5-bytes-0response = DES(K1,C) | DES(K2,C) | DES(K3,C) 123456789# NTLM v2SC = 8-byte server challenge, randomCC = 8-byte client challenge, randomCC* = (X, time, CC2, domain name)v2-Hash = HMAC-MD5(NT-Hash, user name, domain name)LMv2 = HMAC-MD5(v2-Hash, SC, CC)NTv2 = HMAC-MD5(v2-Hash, SC, CC*)response = LMv2 | CC | NTv2 | CC* Ref NT LAN Manager NTLM 协议 Windows下的密码hash——NTLM hash和Net-NTLM hash介绍]]></content>
      <tags>
        <tag>Security</tag>
        <tag>Windows</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[信息收集]]></title>
    <url>%2F2019%2F07%2F15%2F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%2F</url>
    <content type="text"><![CDATA[信息收集，收集的是那些信息？怎样收集？ 信息收集，收集的是那些信息？主要的就是服务器配置信息和网站的一些敏感信息，包含不限于网站域名(及子域名)、操作系统、CMS指纹、真实IP、开放的端口、Whois信息、备案信息、证书、敏感目录、防火墙、登录页面等等，这些信息会对后期渗透带来极大的作用 分类 主动收集 通过扫描确认目标安装的操作系统和网络服务，并发现潜在漏洞的过程 被动收集（外围信息收集） 在不接触目标的情况下搜集目标、网络、客户及其他信息 A记录、MX记录、CNAME记录……度娘百科 和 渗透测试相关总结 域名相关信息收集 这是在得到域名后的第一件事了吧...通常包括该域名的 DNS服务器信息和注册人的联系信息等 Whois信息 简单说，whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。通过whois来实现对域名信息的查询。whois通常使用TCP协议43端口。每个域名/IP的whois信息由对应的管理机构保存。 ——度娘百科 在线 WHois查询网站： 站长之家 阿里云 爱站网 国外的网站可能用国内的 WHois查不到，所以使用国外的 WHois： Whois WHois2 本地 Tools： whois (kali工具) 备案信息查询 主要针对国内网站 天眼查 ICP备案查询网 子域名收集 子域名，是顶级域名（一级域名或父域名）的下一级。例如：mail.baidu.com 是 baidu.com 的子域名 子域名探测可以帮我们发现渗透测试中更多的服务，这将增加发现漏洞的可能性（旁注） Google Hacking site:baidu.com site:baidu.com -www 证书透明度 谷歌 Chrome要求2017年所有 SSL证书都要支持证书透明，所以可以根据 CT log查询支持 HTTPS网站的子域名证书透明度（CT）是证书授权机构（CA）的一个项目，证书授权机构会将每个 SSL/TLS证书发布到公共日志中。 一个SSL/TLS证书通常包含域名、子域名和邮件地址 Certificate Transparency logs（CT ） Crt Censys Google CT crossdomain.xml 文件 其他网站&amp;工具 【TODO】 漏洞： DNS 域传送漏洞 在线网站： DNSdumpster 是一个免费的域名分析网站，是HackerTarget旗下项目，可以查询相关的子域名或者旁站域名 dnsdb 全球 DNS搜索引擎 工具： Sublist3r 是一个python工具，旨在使用OSINT枚举网站的子域。 subDomainsBrute 本工具用于渗透测试目标域名收集。高并发DNS暴力枚举，发现其他工具无法探测到的域名, 如Google，aizhan，fofa wydomain 猪猪侠开发的工具 Knock Subdomain Scan 子域名扫描器，freebuf介绍 subfinder 它已成为 sublist3r项目的继承者。freebuf介绍 Layer子域名挖掘机 SubBrute 枚举域名系统记录和子域的域名系统元查询蜘蛛 aquatone 一款强大的域名工具，可以查子域名相同指纹站点 寻找真实 IP CDN（content delivery network 或 content distribution network）即内容分发网络。如果目标使用了 CDN，那么直接 Ping目标的域名，得到的 IP是离我们最近的一台目标节点的 CDN服务器 判断 CND是否存在 通过多地 Ping域名 通过多地 Ping域名，查看对应 IP 地址是否唯一，若不唯一，多半是使用了 CDN如果 IP大多不一样或者规律性很强，可以尝试查询这些 IP的归属地，判断是否存在 CDN 多地点 Ping在线网站： 站长之家 爱站网 IPIP 使用 nslookup nslookup会得到 DNS解析服务器保存在缓存中的非权威解答 1234567891011121314151617181920212223242526# 采用 CDN&gt; www.baidu.om非权威应答:www.baidu.com canonical name = www.a.shifen.com.Name: www.a.shifen.comAddress: 180.101.49.11Name: www.a.shifen.comAddress: 180.101.49.12# ----------------------------------# 无 CDN&gt; www.puercn.com非权威应答:Name: www.puercn.comAddress: 116.55.242.3# ----------------------------------&gt; maxiang.ioNon-authoritative answer:Name: maxiang.ioAddress: 115.29.201.173 修改本地 hosts文件 修改本地 hosts文件，强行将域名与 IP解析对应 然后访问域名查看页面是否变化 IP反查域名（这个……） 使用 IP反查域名的方式查找 IP下是否存在对应域名，如果使用了 CDN，会出现大量无关域名： 地址： IPIP 爱站网 绕过 CDN 查找网站真实 IP [TODO] 秃域名 因为现有很多 CDN厂商基本只要求把 www.xxx.com cname到 CDN主服务器上去，而且有人为了维护网站时更方便，不用等 CDN缓存，只让 WWW域名使用 CDN，秃域名不使用 123ping www.xxx.comping xxx.com 抓包 抓包观察 IP地址，使用 telnet去连接相应端口，如果返回 html则为真实 IP 内部邮箱源（RSS订阅、邮件等）* 有的服务器本地自带 sendmail，注册之后，会主动发一封邮件给我们，打开邮件的源代码，你就能看到邮件服务器的真实IP了，很大可能与主站处在一个网段 注意，如果是第三方或公共邮件服务器是没用的 查询子域名* 很多站长可能只会对主站或者流量大的子站点做了 CDN，很多子站点又跟主站 在同一台服务器或者同一个C段内，从而能判断出目标的真实 IP段 国外主机解析域名&amp;国外 DNS* 国内很多 CDN 厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实 IP 国外 DNS： 12345678# 目标并未使用 CDN，这里只是举一个使用方法的例子root@arch ~ -&gt;# nslookup maxiang.io 8.8.8.8 Server: 8.8.8.8Address: 8.8.8.8#53Non-authoritative answer:Name: maxiang.ioAddress: 115.29.201.173 国外 Ping服务： App Synthetic Monitor 利用 SSL证书寻找真实原始IP* Finding The Real Origin IPs Hiding Behind CloudFlare or Tor [19 August 2018] 目标 APP抓包* 如果目标站有自己的 APP，可以通过 Fiddler或 Burp Suite抓包，寻找真实 IP 利用网站漏洞(近距离与网站进行 Py交易)* 例如xss、ssrf、命令执行反弹shell等 历史解析记录 查看一些历史的 A记录说不定会发现什么 但是更多的可能是那个 IP已经不在用了… 在线网站： SecurityTrails 17CE Site report RiskIQ [需要注册] 12345678910111213141516# 目标并未使用 CDN，这里只是举一个使用方法的例子root@arch ~ -&gt;# curl -H "Host: www.puercn.com" 116.55.242.3 -k# 返回首页root@arch ~ -&gt;# curl -H "Host: www.puercn.com" 116.55.243.79 -kcurl: (7) Failed to connect to 116.55.243.79 port 80: 连接超时root@arch ~ -&gt;# curl -H "Host: www.puercn.com" 116.55.242.4 -k&lt;html&gt;&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor="white"&gt;&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;&lt;/body&gt;&lt;/html&gt; 全网扫描* 通过扫描所有 IP，根据对比目标网站的 banner，找出其 IP 地址 可以用现成的搜索引擎： shodan、fofa、 zoomeye或扫描工具 zmap、Masscan等等 (转)简单获取CDN背后网站的真实IP 使用 zmap扫描 利用 DDoS* 利用 DDoS耗光 DNS的流量，TG、暗网有专门的 DDoS 验证获取的 IP 找到目标的真实 IP后，如何验证其真实性？如果是 Web，可以直接访问 IP，看看响应页面是否和访问域名返回的一样， 其实上面判断 CDN的有些方法也可以；如果目标段比较大，可以借助类似 Masscan的工具批量扫描对应 IP段中所有开了 80、443、8080端口的 IP，然后逐个尝试访问，观察响应结果是否为目标站点 C段 [TODO] 当已获取某些子域名真实IP时，可以进行横向搜索，会有一些意想不到的收获 Site:10.12.3.* nmap -sS ip/24 在线工具 在线 C段查询 收集开放端口信息 在得到了网站的真实 IP后，就需要进一步的深入调查通过扫描服务器开放的端口以及从该端口判断服务器上存在的服务甚至服务的版本，就可以对症下药 常用工具： Nmap （主要使用） censys（虽然不全） zmap 偏向于扫描指定范围内主机的某个指定端口是否开放 Masscan 可用作 Nmap的替代品 nmap -sS xxx.com -p 21,22,23,3389nmap -sS xxx.com -Fnmap -sS xxx.com... 服务器系统 网址大小写是否敏感判断 Windows/Linux，Linux大小写敏感 nmap -sS xxx.com -O FOFA 网络空间安全引擎 CMS指纹扫描&amp;WAF [TODO] 这里的指纹是指网站 CMS指纹识别、计算机操作系统及 Web容器的指纹等 工具： header头信息 Wappalyzer 浏览器插件，能够分析目标网站所采用的平台构架、网站环境、服务器配置环境、JavaScript框架、编程语言等参数 云悉 云悉在线WEB指纹CMS识别平台 在线cms指纹识别 whatweb在线 WhatWaf 检测和绕过 web应用程序防火墙和保护系统 WAFW00F 识别 Web应用防火墙(WAF)产品的指纹 WhatWeb（kali） 可识别web技术，包括内容管理系统(CMS)、博客平台、统计/分析包、JavaScript库，Web服务器和嵌入式设备等 目录扫描 使用工具： DirSearch 和 字典 [居家必备] dir_scanner（MSF： msf5 &gt; use auxiliary/scanner/http/dir_scanner）目录扫描 robots_txt （MSF： msf5 &gt; use auxiliary/scanner/http/robots_txt） robots扫描 御剑后台扫描珍藏版 DirBuster 是 OWASP开发的一款基于 JAVA编写的、专门用来探测 Web服务器的目录和隐藏文件 漏洞扫描 在了解了大多数信息后，就可以更近一步的 进行漏洞扫描 漏洞扫描 漏洞扫描工具： Rapi7 Nexpose Nessus（强烈推荐）MSF创建新任务报错nessus.rb:979:in cmd_nessus_scan_new解决：#11117 若是持续出现 API Disabled，刷新无效，可在改回来 OpenVAS（开源工具） 网站应用程序扫描 在知道了目标的大体网络架构和运行的服务情况，并对网络进行的漏洞扫描后，就可以进行网站应用程序扫描 常用扫描工具： sqlmap BurpSuite ZAP（kali） WebScarab （kali） Ref 《黑客秘籍——渗透测试实用指南 第2版》 《Metasploit渗透测试魔鬼训练营》 《Web安全攻防 渗透测试实战指南》 web安全信息搜集 Web渗透测试-信息收集总结 渗透测试之信息收集 渗透测试0x00 信息收集 子域名收集笔记 绕过CDN，查找网站的真实IP Finding The Real Origin IPs Hiding Behind CloudFlare or Tor 绕过CDN查找真实IP方法 信息收集 - 端口扫描及服务识别 浅谈端口扫描技术 DF-PUSH(May.17)——抛弃过时的御剑：DirSearch引领web路径爆破新时代！ Metasploit 渗透测试手册第三版 第二章 信息收集与扫描 渗透测试相关总结]]></content>
      <tags>
        <tag>Web Security</tag>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ADB常用命令]]></title>
    <url>%2F2019%2F06%2F22%2FADB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[摘下红花送伊人红花似火绾青丝红花啊红花，绾起伊人的青丝伊人笑靥如花 摘下白花送伊人白花如雪别心口白花啊白花，别在伊人的心口伊人皎洁如月伊人皎洁如月 美绪Bilibili《多罗罗》 基本与应用 查看设备123$ adb devices # List of devices attached# cf264b8f device 进入shell12$ adb shell# OnePlus3T:/ $ ll 以 root 权限运行(手机需要 root)12345adb root# restarting adbd as root# adbd cannot run as root in production builds 无线连接（需要借助 USB 线）1234567891011121314151617# 找到 IP地址(ifconfig/ip addr/ip link)OnePlus3T:/ $ ifconfig# 让设备在 任意 端口监听 TCP/IP 连接root@arch ~ -&gt;# adb tcpip 8848# 断开连接# 通过 IP 地址连接设备adb connect &lt;device-ip-address[:port]&gt;root@arch ~ -&gt;# adb connect 192.168.1.3:8848# connected to 192.168.1.3:8848# 查看设备是否出现root@arch ~ -&gt;# adb devices# List of devices attached# 192.168.1.3:8848 unauthorized 断开无线连接123adb disconnect &lt;device-ip-address&gt;root@arch ~ -&gt;# adb disconnect 192.168.1.3:8848 查看应用列表12345678910111213141516171819202122# adb shell pm list packages [-f] [-d] [-e] [-s] [-3] [-i] [-u] [--user USER_ID] [FILTER]# -s 只显示系统应用# -3 只显示第三方应用# &lt;FILTER&gt; 包名包含 &lt;FILTER&gt; 字符串root@arch ~ -&gt;# adb shell pm list packages -3# package:com.github.shadowsocks# package:com.chenupt.day# package:org.telegram.messenger# package:com.niksoftware.snapseedroot@arch ~ -&gt;# adb shell pm list packages -s# package:com.oneplus.calculator# package:net.oneplus.weather# package:com.android.cts.priv.ctsshimroot@arch ~ -&gt;# adb shell pm list packages bili# package:com.hypergryph.arknights.bilibili# package:com.bilibili.comic# package:com.digitalsky.girlsfrontline.cn.bili# package:tv.danmaku.bili 安装/卸载 APK123456789# adb install [-lrtsdg] &lt;path_to_apk&gt;# -l 将应用安装到保护目录 /mnt/asec# -r 允许覆盖安装# -t 允许安装 AndroidManifest.xml 里 application 指定 android:testOnly="true" 的应用# -s 将应用安装到 sdcard# -d 允许降级覆盖安装# -g 授予所有运行时权限# 详细 : &lt;https://github.com/mzlogin/awesome-adb#%E5%AE%89%E8%A3%85-apk&gt; 1234# adb uninstall [-k] &lt;packagename&gt;# &lt;packagename&gt; 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录root@arch ~ -&gt;# adb uninstall com.bilibili.comic 清除应用数据与缓存12# adb shell dumpsys package &lt;packagename&gt;root@arch ~ -&gt;# adb shell pm clear com.bilibili.comic 查看应用详细信息1root@arch ~ -&gt;# adb shell dumpsys package com.bilibili.comic 查看应用安装路径1234# adb shell pm path &lt;PACKAGE&gt;root@arch ~ -&gt;# adb shell pm path com.bilibili.comic # package:/data/app/com.bilibili.comic-VefU-I3Sq3yFa7hzXBuAXg==/base.apk 强制停止应用123# adb shell am force-stop &lt;packagename&gt;root@arch ~ -&gt;# adb shell am force-stop com.taobao.taoba 文件管理 复制设备里的文件到电脑123# adb pull &lt;设备里的文件路径&gt; [电脑上的目录]root@arch ~ -&gt;# adb pull /sdcard/Pictures ~/Pictures 复制电脑里的文件到设备123# adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;root@arch ~ -&gt;# adb push ~/Documents/Python/hello.py /sdcard/Python 模拟按键/输入12345678# input [&lt;source&gt;] &lt;command&gt; [&lt;arg&gt;...]# adb shell input keyevent &lt;keycode&gt;# 亮屏root@arch ~ -&gt;# adb shell input keyevent 224# 详细: &lt;https://github.com/mzlogin/awesome-adb#%E6%A8%A1%E6%8B%9F%E6%8C%89%E9%94%AE%E8%BE%93%E5%85%A5&gt; 实用功能截图保存到电脑1root@arch ~ -&gt;# adb exec-out screencap -p &gt; sc.png 录制屏幕12345678910# 录制屏幕以 mp4 格式保存到 /sdcardadb shell screenrecord /sdcard/filename.mp4# 按 Ctrl-C 停止# 默认录制时间和最长录制时间都是 180 秒# --size WIDTHxHEIGHT 视频的尺寸，比如 1280x720，默认是屏幕分辨率。# --bit-rate RATE 视频的比特率，默认是 4Mbps。# --time-limit TIME 录制时长，单位秒。# --verbose 输出更多信息。 Top &amp;&amp; ps123root@arch ~ -&gt;# adb shell toproot@arch ~ -&gt;# adb shell ps 查看进程 UID1234# adb shell dumpsys package &lt;packagename&gt; | grep userId=root@arch ~ -&gt;# adb shell dumpsys package com.bilibili.comic | grep userId= # userId=10203 基本的 linux命令（ls/cat/df/rm/…） Ref ADB Usage Complete / ADB 用法大全]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Blog Reference Link]]></title>
    <url>%2F2019%2F06%2F14%2FBlog-Reference-Link%2F</url>
    <content type="text"><![CDATA[恩 有点特别的信但是但这是……世界上最纯粹最美丽的思念 文伽Bilibili《死后文》 配置 Blog时参考的链接： 从jekyll到hexo Hexo的Next主题详细配置 hexo搭建个人博客–NexT主题优化 在Hexo博客上添加可爱的Live2D模型 Hexo添加字数统计、阅读时长 下载的hexo主题必须删掉.git 2个小时教你hexo博客添加评论、打赏… 使用GithubPages和Hexo搭建自己… 将hexo+github博客同步托管至coding NexT使用文档 使用Hexo+Next主题搭建自己的个人博客 Hexo中Gitalk配置使用教程 Hexo NexT主题中集成gitalk评论系统 Hexo中引入Mermaid流程图 hexo-filter-mermaid-diagrams 配置 gitalk评论系统注意 12345678910111213// gitalk.swig &lt;script type="text/javascript"&gt; var gitalk = new Gitalk(&#123; clientID: '&#123;&#123; theme.gitalk.ClientID &#125;&#125;', // &lt;---- clientSecret: '&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;', // &lt;---- repo: '&#123;&#123; theme.gitalk.repo &#125;&#125;', owner: '&#123;&#123; theme.gitalk.githubID &#125;&#125;', admin: ['&#123;&#123; theme.gitalk.adminUser &#125;&#125;'], id: location.pathname, distractionFreeMode: '&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;' &#125;) gitalk.render('gitalk-container') &lt;/script&gt; 123456789gitalk: enable: true githubID: evilH2O2 repo: gitalkComments ClientID: xxxx # &lt;---- 与上面对应，网上有版本不一样的 （ client_id ) ClientSecret: xxx # &lt;---- 与上面对应 owner: evilH2O2 adminUser: evilH2O2 distractionFreeMode: true 用 代码块(3个 `) + mermaid使用 Mermaid流程图 1234# ``3 mermaid# graph LR # A --&gt; B# ``3]]></content>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test Page]]></title>
    <url>%2F2019%2F06%2F12%2FTest-Page%2F</url>
    <content type="text"><![CDATA[本页面用来进行测试 h2h3h4h5 code code code code list1 list2 list3 llist1 llist2 list1 list2 list3 list4 Test404.py1234import osos.system("ls -l") I jump you jump 行千里路，吃万家菜 佚名, Internet您可就别点击了 https://404.com 404 $C^2$ graph LR subgraph 初始轮 txt[明文块] --> init0[加轮秘钥] end subgraph 普通轮 第1轮 pu0[字节代替] pu1[行移位] pu2[列混淆] pu3[加轮秘钥] end init0[加轮秘钥] --> pu0[字节代替] pu3[加轮秘钥] --> lue0[...] subgraph 普通轮 第9轮 pu20[字节代替] pu21[行移位] pu22[列混淆] pu23[加轮秘钥] end lue0[...] --> pu20[字节代替] subgraph 最终轮 end0[字节代替] end1[行移位] end2[加轮秘钥] end pu23[加轮秘钥] --> end0[字节代替] end2[加轮秘钥] --> end3[密文] subgraph 扩展密钥 expand0[W 0-15] expand1[W 16-31] expand2[W 144-159] expand3[W 160-175] end 密钥 --- expand0[W 0-15] expand0[W 0-15] --> init0[加轮秘钥] expand1[W 16-31] --> pu3[加轮秘钥] expand2[W 144-159] --> pu23[加轮秘钥] expand3[W 160-175] --> end2[加轮秘钥]]]></content>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
</search>
